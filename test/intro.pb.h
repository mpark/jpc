// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: intro.proto

#ifndef PROTOBUF_intro_2eproto__INCLUDED
#define PROTOBUF_intro_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace intro {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_intro_2eproto();
void protobuf_AssignDesc_intro_2eproto();
void protobuf_ShutdownFile_intro_2eproto();

class BarInfo;
class FooInfo;

enum FooInfo_H {
  FooInfo_H_X = 1,
  FooInfo_H_Y = 0
};
bool FooInfo_H_IsValid(int value);
const FooInfo_H FooInfo_H_H_MIN = FooInfo_H_Y;
const FooInfo_H FooInfo_H_H_MAX = FooInfo_H_X;
const int FooInfo_H_H_ARRAYSIZE = FooInfo_H_H_MAX + 1;

const ::google::protobuf::EnumDescriptor* FooInfo_H_descriptor();
inline const ::std::string& FooInfo_H_Name(FooInfo_H value) {
  return ::google::protobuf::internal::NameOfEnum(
    FooInfo_H_descriptor(), value);
}
inline bool FooInfo_H_Parse(
    const ::std::string& name, FooInfo_H* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FooInfo_H>(
    FooInfo_H_descriptor(), name, value);
}
// ===================================================================

class BarInfo : public ::google::protobuf::Message {
 public:
  BarInfo();
  virtual ~BarInfo();

  BarInfo(const BarInfo& from);

  inline BarInfo& operator=(const BarInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BarInfo& default_instance();

  void Swap(BarInfo* other);

  // implements Message ----------------------------------------------

  BarInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BarInfo& from);
  void MergeFrom(const BarInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline bool x() const;
  inline void set_x(bool value);

  // optional int64 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int64 y() const;
  inline void set_y(::google::protobuf::int64 value);

  // optional string z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline const ::std::string& z() const;
  inline void set_z(const ::std::string& value);
  inline void set_z(const char* value);
  inline void set_z(const char* value, size_t size);
  inline ::std::string* mutable_z();
  inline ::std::string* release_z();
  inline void set_allocated_z(::std::string* z);

  // @@protoc_insertion_point(class_scope:intro.BarInfo)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 y_;
  ::std::string* z_;
  bool x_;
  friend void  protobuf_AddDesc_intro_2eproto();
  friend void protobuf_AssignDesc_intro_2eproto();
  friend void protobuf_ShutdownFile_intro_2eproto();

  void InitAsDefaultInstance();
  static BarInfo* default_instance_;
};
// -------------------------------------------------------------------

class FooInfo : public ::google::protobuf::Message {
 public:
  FooInfo();
  virtual ~FooInfo();

  FooInfo(const FooInfo& from);

  inline FooInfo& operator=(const FooInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FooInfo& default_instance();

  void Swap(FooInfo* other);

  // implements Message ----------------------------------------------

  FooInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FooInfo& from);
  void MergeFrom(const FooInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FooInfo_H H;
  static const H X = FooInfo_H_X;
  static const H Y = FooInfo_H_Y;
  static inline bool H_IsValid(int value) {
    return FooInfo_H_IsValid(value);
  }
  static const H H_MIN =
    FooInfo_H_H_MIN;
  static const H H_MAX =
    FooInfo_H_H_MAX;
  static const int H_ARRAYSIZE =
    FooInfo_H_H_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  H_descriptor() {
    return FooInfo_H_descriptor();
  }
  static inline const ::std::string& H_Name(H value) {
    return FooInfo_H_Name(value);
  }
  static inline bool H_Parse(const ::std::string& name,
      H* value) {
    return FooInfo_H_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bool a = 1;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 1;
  inline bool a() const;
  inline void set_a(bool value);

  // required int32 b = 2;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 2;
  inline ::google::protobuf::int32 b() const;
  inline void set_b(::google::protobuf::int32 value);

  // required int64 c = 3;
  inline bool has_c() const;
  inline void clear_c();
  static const int kCFieldNumber = 3;
  inline ::google::protobuf::int64 c() const;
  inline void set_c(::google::protobuf::int64 value);

  // required uint32 d = 4;
  inline bool has_d() const;
  inline void clear_d();
  static const int kDFieldNumber = 4;
  inline ::google::protobuf::uint32 d() const;
  inline void set_d(::google::protobuf::uint32 value);

  // required uint64 e = 6;
  inline bool has_e() const;
  inline void clear_e();
  static const int kEFieldNumber = 6;
  inline ::google::protobuf::uint64 e() const;
  inline void set_e(::google::protobuf::uint64 value);

  // required double f = 7;
  inline bool has_f() const;
  inline void clear_f();
  static const int kFFieldNumber = 7;
  inline double f() const;
  inline void set_f(double value);

  // required float g = 8;
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 8;
  inline float g() const;
  inline void set_g(float value);

  // required .intro.FooInfo.H h = 5;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 5;
  inline ::intro::FooInfo_H h() const;
  inline void set_h(::intro::FooInfo_H value);

  // required string i = 9;
  inline bool has_i() const;
  inline void clear_i();
  static const int kIFieldNumber = 9;
  inline const ::std::string& i() const;
  inline void set_i(const ::std::string& value);
  inline void set_i(const char* value);
  inline void set_i(const char* value, size_t size);
  inline ::std::string* mutable_i();
  inline ::std::string* release_i();
  inline void set_allocated_i(::std::string* i);

  // repeated int32 j = 10;
  inline int j_size() const;
  inline void clear_j();
  static const int kJFieldNumber = 10;
  inline ::google::protobuf::int32 j(int index) const;
  inline void set_j(int index, ::google::protobuf::int32 value);
  inline void add_j(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      j() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_j();

  // repeated string k = 11;
  inline int k_size() const;
  inline void clear_k();
  static const int kKFieldNumber = 11;
  inline const ::std::string& k(int index) const;
  inline ::std::string* mutable_k(int index);
  inline void set_k(int index, const ::std::string& value);
  inline void set_k(int index, const char* value);
  inline void set_k(int index, const char* value, size_t size);
  inline ::std::string* add_k();
  inline void add_k(const ::std::string& value);
  inline void add_k(const char* value);
  inline void add_k(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& k() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_k();

  // optional int32 l = 12;
  inline bool has_l() const;
  inline void clear_l();
  static const int kLFieldNumber = 12;
  inline ::google::protobuf::int32 l() const;
  inline void set_l(::google::protobuf::int32 value);

  // optional int32 m = 13;
  inline bool has_m() const;
  inline void clear_m();
  static const int kMFieldNumber = 13;
  inline ::google::protobuf::int32 m() const;
  inline void set_m(::google::protobuf::int32 value);

  // optional int64 n = 14;
  inline bool has_n() const;
  inline void clear_n();
  static const int kNFieldNumber = 14;
  inline ::google::protobuf::int64 n() const;
  inline void set_n(::google::protobuf::int64 value);

  // optional int32 o = 15;
  inline bool has_o() const;
  inline void clear_o();
  static const int kOFieldNumber = 15;
  inline ::google::protobuf::int32 o() const;
  inline void set_o(::google::protobuf::int32 value);

  // optional int32 p = 16;
  inline bool has_p() const;
  inline void clear_p();
  static const int kPFieldNumber = 16;
  inline ::google::protobuf::int32 p() const;
  inline void set_p(::google::protobuf::int32 value);

  // optional .intro.BarInfo bar = 17;
  inline bool has_bar() const;
  inline void clear_bar();
  static const int kBarFieldNumber = 17;
  inline const ::intro::BarInfo& bar() const;
  inline ::intro::BarInfo* mutable_bar();
  inline ::intro::BarInfo* release_bar();
  inline void set_allocated_bar(::intro::BarInfo* bar);

  // @@protoc_insertion_point(class_scope:intro.FooInfo)
 private:
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_c();
  inline void clear_has_c();
  inline void set_has_d();
  inline void clear_has_d();
  inline void set_has_e();
  inline void clear_has_e();
  inline void set_has_f();
  inline void clear_has_f();
  inline void set_has_g();
  inline void clear_has_g();
  inline void set_has_h();
  inline void clear_has_h();
  inline void set_has_i();
  inline void clear_has_i();
  inline void set_has_l();
  inline void clear_has_l();
  inline void set_has_m();
  inline void clear_has_m();
  inline void set_has_n();
  inline void clear_has_n();
  inline void set_has_o();
  inline void clear_has_o();
  inline void set_has_p();
  inline void clear_has_p();
  inline void set_has_bar();
  inline void clear_has_bar();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool a_;
  ::google::protobuf::int32 b_;
  ::google::protobuf::int64 c_;
  ::google::protobuf::uint64 e_;
  ::google::protobuf::uint32 d_;
  float g_;
  double f_;
  ::std::string* i_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > j_;
  int h_;
  ::google::protobuf::int32 l_;
  ::google::protobuf::RepeatedPtrField< ::std::string> k_;
  ::google::protobuf::int64 n_;
  ::google::protobuf::int32 m_;
  ::google::protobuf::int32 o_;
  ::intro::BarInfo* bar_;
  ::google::protobuf::int32 p_;
  friend void  protobuf_AddDesc_intro_2eproto();
  friend void protobuf_AssignDesc_intro_2eproto();
  friend void protobuf_ShutdownFile_intro_2eproto();

  void InitAsDefaultInstance();
  static FooInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// BarInfo

// required bool x = 1;
inline bool BarInfo::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BarInfo::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BarInfo::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BarInfo::clear_x() {
  x_ = false;
  clear_has_x();
}
inline bool BarInfo::x() const {
  // @@protoc_insertion_point(field_get:intro.BarInfo.x)
  return x_;
}
inline void BarInfo::set_x(bool value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:intro.BarInfo.x)
}

// optional int64 y = 2;
inline bool BarInfo::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BarInfo::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BarInfo::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BarInfo::clear_y() {
  y_ = GOOGLE_LONGLONG(0);
  clear_has_y();
}
inline ::google::protobuf::int64 BarInfo::y() const {
  // @@protoc_insertion_point(field_get:intro.BarInfo.y)
  return y_;
}
inline void BarInfo::set_y(::google::protobuf::int64 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:intro.BarInfo.y)
}

// optional string z = 3;
inline bool BarInfo::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BarInfo::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BarInfo::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BarInfo::clear_z() {
  if (z_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    z_->clear();
  }
  clear_has_z();
}
inline const ::std::string& BarInfo::z() const {
  // @@protoc_insertion_point(field_get:intro.BarInfo.z)
  return *z_;
}
inline void BarInfo::set_z(const ::std::string& value) {
  set_has_z();
  if (z_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    z_ = new ::std::string;
  }
  z_->assign(value);
  // @@protoc_insertion_point(field_set:intro.BarInfo.z)
}
inline void BarInfo::set_z(const char* value) {
  set_has_z();
  if (z_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    z_ = new ::std::string;
  }
  z_->assign(value);
  // @@protoc_insertion_point(field_set_char:intro.BarInfo.z)
}
inline void BarInfo::set_z(const char* value, size_t size) {
  set_has_z();
  if (z_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    z_ = new ::std::string;
  }
  z_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:intro.BarInfo.z)
}
inline ::std::string* BarInfo::mutable_z() {
  set_has_z();
  if (z_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    z_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:intro.BarInfo.z)
  return z_;
}
inline ::std::string* BarInfo::release_z() {
  clear_has_z();
  if (z_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = z_;
    z_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BarInfo::set_allocated_z(::std::string* z) {
  if (z_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete z_;
  }
  if (z) {
    set_has_z();
    z_ = z;
  } else {
    clear_has_z();
    z_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:intro.BarInfo.z)
}

// -------------------------------------------------------------------

// FooInfo

// required bool a = 1;
inline bool FooInfo::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FooInfo::set_has_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FooInfo::clear_has_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FooInfo::clear_a() {
  a_ = false;
  clear_has_a();
}
inline bool FooInfo::a() const {
  // @@protoc_insertion_point(field_get:intro.FooInfo.a)
  return a_;
}
inline void FooInfo::set_a(bool value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:intro.FooInfo.a)
}

// required int32 b = 2;
inline bool FooInfo::has_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FooInfo::set_has_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FooInfo::clear_has_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FooInfo::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline ::google::protobuf::int32 FooInfo::b() const {
  // @@protoc_insertion_point(field_get:intro.FooInfo.b)
  return b_;
}
inline void FooInfo::set_b(::google::protobuf::int32 value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:intro.FooInfo.b)
}

// required int64 c = 3;
inline bool FooInfo::has_c() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FooInfo::set_has_c() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FooInfo::clear_has_c() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FooInfo::clear_c() {
  c_ = GOOGLE_LONGLONG(0);
  clear_has_c();
}
inline ::google::protobuf::int64 FooInfo::c() const {
  // @@protoc_insertion_point(field_get:intro.FooInfo.c)
  return c_;
}
inline void FooInfo::set_c(::google::protobuf::int64 value) {
  set_has_c();
  c_ = value;
  // @@protoc_insertion_point(field_set:intro.FooInfo.c)
}

// required uint32 d = 4;
inline bool FooInfo::has_d() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FooInfo::set_has_d() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FooInfo::clear_has_d() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FooInfo::clear_d() {
  d_ = 0u;
  clear_has_d();
}
inline ::google::protobuf::uint32 FooInfo::d() const {
  // @@protoc_insertion_point(field_get:intro.FooInfo.d)
  return d_;
}
inline void FooInfo::set_d(::google::protobuf::uint32 value) {
  set_has_d();
  d_ = value;
  // @@protoc_insertion_point(field_set:intro.FooInfo.d)
}

// required uint64 e = 6;
inline bool FooInfo::has_e() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FooInfo::set_has_e() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FooInfo::clear_has_e() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FooInfo::clear_e() {
  e_ = GOOGLE_ULONGLONG(0);
  clear_has_e();
}
inline ::google::protobuf::uint64 FooInfo::e() const {
  // @@protoc_insertion_point(field_get:intro.FooInfo.e)
  return e_;
}
inline void FooInfo::set_e(::google::protobuf::uint64 value) {
  set_has_e();
  e_ = value;
  // @@protoc_insertion_point(field_set:intro.FooInfo.e)
}

// required double f = 7;
inline bool FooInfo::has_f() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FooInfo::set_has_f() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FooInfo::clear_has_f() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FooInfo::clear_f() {
  f_ = 0;
  clear_has_f();
}
inline double FooInfo::f() const {
  // @@protoc_insertion_point(field_get:intro.FooInfo.f)
  return f_;
}
inline void FooInfo::set_f(double value) {
  set_has_f();
  f_ = value;
  // @@protoc_insertion_point(field_set:intro.FooInfo.f)
}

// required float g = 8;
inline bool FooInfo::has_g() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FooInfo::set_has_g() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FooInfo::clear_has_g() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FooInfo::clear_g() {
  g_ = 0;
  clear_has_g();
}
inline float FooInfo::g() const {
  // @@protoc_insertion_point(field_get:intro.FooInfo.g)
  return g_;
}
inline void FooInfo::set_g(float value) {
  set_has_g();
  g_ = value;
  // @@protoc_insertion_point(field_set:intro.FooInfo.g)
}

// required .intro.FooInfo.H h = 5;
inline bool FooInfo::has_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FooInfo::set_has_h() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FooInfo::clear_has_h() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FooInfo::clear_h() {
  h_ = 1;
  clear_has_h();
}
inline ::intro::FooInfo_H FooInfo::h() const {
  // @@protoc_insertion_point(field_get:intro.FooInfo.h)
  return static_cast< ::intro::FooInfo_H >(h_);
}
inline void FooInfo::set_h(::intro::FooInfo_H value) {
  assert(::intro::FooInfo_H_IsValid(value));
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:intro.FooInfo.h)
}

// required string i = 9;
inline bool FooInfo::has_i() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FooInfo::set_has_i() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FooInfo::clear_has_i() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FooInfo::clear_i() {
  if (i_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_->clear();
  }
  clear_has_i();
}
inline const ::std::string& FooInfo::i() const {
  // @@protoc_insertion_point(field_get:intro.FooInfo.i)
  return *i_;
}
inline void FooInfo::set_i(const ::std::string& value) {
  set_has_i();
  if (i_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_ = new ::std::string;
  }
  i_->assign(value);
  // @@protoc_insertion_point(field_set:intro.FooInfo.i)
}
inline void FooInfo::set_i(const char* value) {
  set_has_i();
  if (i_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_ = new ::std::string;
  }
  i_->assign(value);
  // @@protoc_insertion_point(field_set_char:intro.FooInfo.i)
}
inline void FooInfo::set_i(const char* value, size_t size) {
  set_has_i();
  if (i_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_ = new ::std::string;
  }
  i_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:intro.FooInfo.i)
}
inline ::std::string* FooInfo::mutable_i() {
  set_has_i();
  if (i_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    i_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:intro.FooInfo.i)
  return i_;
}
inline ::std::string* FooInfo::release_i() {
  clear_has_i();
  if (i_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = i_;
    i_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FooInfo::set_allocated_i(::std::string* i) {
  if (i_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete i_;
  }
  if (i) {
    set_has_i();
    i_ = i;
  } else {
    clear_has_i();
    i_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:intro.FooInfo.i)
}

// repeated int32 j = 10;
inline int FooInfo::j_size() const {
  return j_.size();
}
inline void FooInfo::clear_j() {
  j_.Clear();
}
inline ::google::protobuf::int32 FooInfo::j(int index) const {
  // @@protoc_insertion_point(field_get:intro.FooInfo.j)
  return j_.Get(index);
}
inline void FooInfo::set_j(int index, ::google::protobuf::int32 value) {
  j_.Set(index, value);
  // @@protoc_insertion_point(field_set:intro.FooInfo.j)
}
inline void FooInfo::add_j(::google::protobuf::int32 value) {
  j_.Add(value);
  // @@protoc_insertion_point(field_add:intro.FooInfo.j)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FooInfo::j() const {
  // @@protoc_insertion_point(field_list:intro.FooInfo.j)
  return j_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FooInfo::mutable_j() {
  // @@protoc_insertion_point(field_mutable_list:intro.FooInfo.j)
  return &j_;
}

// repeated string k = 11;
inline int FooInfo::k_size() const {
  return k_.size();
}
inline void FooInfo::clear_k() {
  k_.Clear();
}
inline const ::std::string& FooInfo::k(int index) const {
  // @@protoc_insertion_point(field_get:intro.FooInfo.k)
  return k_.Get(index);
}
inline ::std::string* FooInfo::mutable_k(int index) {
  // @@protoc_insertion_point(field_mutable:intro.FooInfo.k)
  return k_.Mutable(index);
}
inline void FooInfo::set_k(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:intro.FooInfo.k)
  k_.Mutable(index)->assign(value);
}
inline void FooInfo::set_k(int index, const char* value) {
  k_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:intro.FooInfo.k)
}
inline void FooInfo::set_k(int index, const char* value, size_t size) {
  k_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:intro.FooInfo.k)
}
inline ::std::string* FooInfo::add_k() {
  return k_.Add();
}
inline void FooInfo::add_k(const ::std::string& value) {
  k_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:intro.FooInfo.k)
}
inline void FooInfo::add_k(const char* value) {
  k_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:intro.FooInfo.k)
}
inline void FooInfo::add_k(const char* value, size_t size) {
  k_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:intro.FooInfo.k)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FooInfo::k() const {
  // @@protoc_insertion_point(field_list:intro.FooInfo.k)
  return k_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FooInfo::mutable_k() {
  // @@protoc_insertion_point(field_mutable_list:intro.FooInfo.k)
  return &k_;
}

// optional int32 l = 12;
inline bool FooInfo::has_l() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FooInfo::set_has_l() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FooInfo::clear_has_l() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FooInfo::clear_l() {
  l_ = 0;
  clear_has_l();
}
inline ::google::protobuf::int32 FooInfo::l() const {
  // @@protoc_insertion_point(field_get:intro.FooInfo.l)
  return l_;
}
inline void FooInfo::set_l(::google::protobuf::int32 value) {
  set_has_l();
  l_ = value;
  // @@protoc_insertion_point(field_set:intro.FooInfo.l)
}

// optional int32 m = 13;
inline bool FooInfo::has_m() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FooInfo::set_has_m() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FooInfo::clear_has_m() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FooInfo::clear_m() {
  m_ = 0;
  clear_has_m();
}
inline ::google::protobuf::int32 FooInfo::m() const {
  // @@protoc_insertion_point(field_get:intro.FooInfo.m)
  return m_;
}
inline void FooInfo::set_m(::google::protobuf::int32 value) {
  set_has_m();
  m_ = value;
  // @@protoc_insertion_point(field_set:intro.FooInfo.m)
}

// optional int64 n = 14;
inline bool FooInfo::has_n() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FooInfo::set_has_n() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FooInfo::clear_has_n() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FooInfo::clear_n() {
  n_ = GOOGLE_LONGLONG(0);
  clear_has_n();
}
inline ::google::protobuf::int64 FooInfo::n() const {
  // @@protoc_insertion_point(field_get:intro.FooInfo.n)
  return n_;
}
inline void FooInfo::set_n(::google::protobuf::int64 value) {
  set_has_n();
  n_ = value;
  // @@protoc_insertion_point(field_set:intro.FooInfo.n)
}

// optional int32 o = 15;
inline bool FooInfo::has_o() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FooInfo::set_has_o() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FooInfo::clear_has_o() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FooInfo::clear_o() {
  o_ = 0;
  clear_has_o();
}
inline ::google::protobuf::int32 FooInfo::o() const {
  // @@protoc_insertion_point(field_get:intro.FooInfo.o)
  return o_;
}
inline void FooInfo::set_o(::google::protobuf::int32 value) {
  set_has_o();
  o_ = value;
  // @@protoc_insertion_point(field_set:intro.FooInfo.o)
}

// optional int32 p = 16;
inline bool FooInfo::has_p() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FooInfo::set_has_p() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FooInfo::clear_has_p() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FooInfo::clear_p() {
  p_ = 0;
  clear_has_p();
}
inline ::google::protobuf::int32 FooInfo::p() const {
  // @@protoc_insertion_point(field_get:intro.FooInfo.p)
  return p_;
}
inline void FooInfo::set_p(::google::protobuf::int32 value) {
  set_has_p();
  p_ = value;
  // @@protoc_insertion_point(field_set:intro.FooInfo.p)
}

// optional .intro.BarInfo bar = 17;
inline bool FooInfo::has_bar() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FooInfo::set_has_bar() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FooInfo::clear_has_bar() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FooInfo::clear_bar() {
  if (bar_ != NULL) bar_->::intro::BarInfo::Clear();
  clear_has_bar();
}
inline const ::intro::BarInfo& FooInfo::bar() const {
  // @@protoc_insertion_point(field_get:intro.FooInfo.bar)
  return bar_ != NULL ? *bar_ : *default_instance_->bar_;
}
inline ::intro::BarInfo* FooInfo::mutable_bar() {
  set_has_bar();
  if (bar_ == NULL) bar_ = new ::intro::BarInfo;
  // @@protoc_insertion_point(field_mutable:intro.FooInfo.bar)
  return bar_;
}
inline ::intro::BarInfo* FooInfo::release_bar() {
  clear_has_bar();
  ::intro::BarInfo* temp = bar_;
  bar_ = NULL;
  return temp;
}
inline void FooInfo::set_allocated_bar(::intro::BarInfo* bar) {
  delete bar_;
  bar_ = bar;
  if (bar) {
    set_has_bar();
  } else {
    clear_has_bar();
  }
  // @@protoc_insertion_point(field_set_allocated:intro.FooInfo.bar)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace intro

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::intro::FooInfo_H> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::intro::FooInfo_H>() {
  return ::intro::FooInfo_H_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_intro_2eproto__INCLUDED
